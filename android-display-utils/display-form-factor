#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_root_requirements() {
  _check_cmd \
    "display-dpi" \
    "android-display-utils"
  _check_cmd \
    "display-ppa" \
    "android-display-utils"
  _check_cmd \
    "display-resolution" \
    "android-display-utils"
}

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  get_mode=""
  target_command=""
  form_factor=""
  scale_force=""
  color=""
  quiet=""
}

_ratio_get() {
  local \
    _ppa_native \
    _ppa_current
  _ppa_native="$( \
    display-ppa \
      -p)"
  _ppa_current="$( \
    display-ppa)"
  echo \
    "scale=5;${_ppa_current} / ${_ppa_native}" | \
    bc
}

_root_get() {
  local \
    _scale_force="${1}" \
    _form_factor \
    _ratio
  _ratio="$( \
    _ratio_get)"
  if [[ "${_scale_force}" != "" ]]; then
    _form_factor="$( \
      _ratio_get)"
  elif (( "$(echo "${_ratio} == 1" | bc -l)" )); then
    _form_factor="native"
  elif (( "$(echo "${_ratio} != 1" | bc -l)" )); then
    if (( $(echo "1.45 < ${_ratio}" | bc -l ) )); then
      _form_factor="larger"
    elif (( $(echo "${_ratio} < 0.6" | bc -l)  )); then
      _form_factor="smaller"
    else
      _form_factor="native"
    fi
  fi
  echo \
    "${_form_factor}"
}

_ppa_get() {
  local \
    _mode="${1}" \
    _scale_force="${2}" \
    _physical_ppa
  _physical_ppa="$( \
    display-ppa \
      -p)"
  if [[ "${_mode}" != "" ]]; then
    if [[ "${_mode}" == "native" ]]; then
      _ppa="${_physical_ppa}"
    elif [[ "${_mode}" == "larger" ]]; then
      _ppa="$( \
        echo \
        "scale=0;((${_physical_ppa} * 3) / 2 + 0.5) / 1" | \
          bc)"
    elif [[ "${_mode}" == "smaller" ]]; then
      _ppa="$( \
        echo \
          "scale=0;(${_physical_ppa} / 2 + 0.5) / 1" | \
          bc)"
    fi
  elif [[ "${_scale_force}" != "" ]]; then
    _ppa="$( \
      echo \
        "scale=0;(${_physical_ppa} * ${_scale_force} + 0.5) / 1" | \
        bc)"
  fi
}

_root_set() {
  local \
    _value="${1}" \
    _scale_force="${2}" \
    _display_dpi_opts=() \
    _ppa \
    _height \
    _width \
    _pixels \
    _current_form_factor \
    _dpi
  if [[ "${quiet}" != "y" ]]; then
    _display_dpi_opts+=(
      -v
    )
  fi
  _current_form_factor="$( \
    _root_get \
      "${_scale_force}")"
  if [[ "${_value}" == "${_current_form_factor}" ]]; then
    _msg_info \
      "form factor '${_value}' already set"
    return 0
  else
    _msg_info \
      "Setting form factor from ${_current_form_factor} to ${_value}"
    _height="$( \
      display-resolution \
        -H)"
    _width="$( \
      display-resolution \
        -W)"
    _pixels="$(( \
      _width * _height ))"
    _ppa_get \
      "${_value}" \
      "${_scale_force}"
    _dpi="$( \
      echo \
        "scale=0; ${_pixels} / ${_ppa}" | \
        bc)"
  fi
  display-dpi \
    "${_display_opts[@]}" \
    set
      "${_dpi}"
}

_display_form_factor() {
  local \
    _command="${1}" \
    _mode="${2}" \
    _value="${3}" \
    _scale_force="${4}" \
    _args=()
  if [[ "${_command}" == "set" ]]; then
    _args+=(
      "${_value}"
      "${_scale_force}"
    )
  elif [[ "${_command}" == "get" ]]; then
    _args+=(
      "${_scale_force}"
    )
  fi
  "_${_mode}_${_command}" \
    "${_args[@]}"
}

_auto_detect_mode() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _root_requirements
    echo \
      "root"
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    _msg_error \
      "not implemented. something with xdotool needs to be written"
  fi
}

_set_overrides() {
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "get" \
    "mode" \
    "$(_auto_detect_mode)"
  _set_override \
    "target" \
    "command" \
    "get"
  _set_override \
    "scale" \
    "force" \
    ""
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "      Form factor at date:   $(_get "get" "date")"
  _msg_info "                 Get mode:   $(_get "get" "mode")"
  _msg_info "           Target command:   $(_get "target" "command")"
  _msg_info "              Form factor:   $(_get "form" "factor")"
  _msg_info "              Scale force:   $(_get "scale" "force")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Manage Android display form factor.

Usage:
  $(_get "app" "name")
    [options]
    (<command>)
    (<form_factor>)
  commands:
    get
    set                   Accepted values: native, larger, smaller
  options:
     -m <method>          Method to obtain form factor.
                          Default: $(_get "get" "mode")
     -f <scale>           Set the form factor using a scale factor
                          applied to native ppa value.
                          Values greater than 1 will make the
                          interface smaller, less than 1 larger.
                          Default: $(_get "scale" "force")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:f:cvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_get_mode="${OPTARG}" ;;
    f) override_scale_force="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( "$#" == 0 )) && \
  _set \
    "target" \
    "command" \
    "get"
(( 0 < "$#" )) && \
  _set \
    "target" \
    "command" \
    "${1}"
(( 1 < "$#" )) && \
[[ "${target_command}" == "set" ]] && \
  _set \
    "form" \
    "factor" \
    "${2}"
_set_overrides
app_opts=(
  "$(_get \
       "target" \
       "command")"
  "$(_get \
       "get" \
       "mode")"
  "$(_get \
       "form" \
       "factor")"
  "$(_get \
       "scale" \
       "force")"
)
_show_config
_display_form_factor \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
