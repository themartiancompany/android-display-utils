#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_root_requirements() {
  _check_cmd \
    "su" \
    "tsu"
}

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  target_command=""
  dpi_value=""
  get_mode=""
  physical_density=""
  color=""
  quiet=""
}

_root_get() {
  local \
    _mode="${1}" \
    _cmd=() \
    _value \
    _status
  if [[ "${TERMUX_VERSION}" != "" ]]; then
    _cmd=(
      wm
        density
    )
    _value="$( \
      su \
        -c \
        "${_cmd[@]}" | \
        grep \
          "${_mode} density: " |
          awk \
            '{print $3}')"
    if [[ "${_value}" == "" ]]; then
      _value="$( \
        su \
          -c \
          "${_cmd[@]}" | \
          grep \
            "Physical density: " |
            awk \
              '{print $3}')"
    fi
  fi
  echo \
    "${_value}"
}

_root_min() {
  local \
    _cmd=() \
    _out
  _cmd=(
    wm
      density
        1
  )
  su \
    -c \
    "${_cmd[*]}" | \
    awk \
      '{print $6}' | \
      tr \
        -d \
        $'\r' 
}

_root_set() {
  local \
    _value="${1}" \
    _cmd=() \
    _dpi_min \
    _below
  _dpi_min="$( \
    _root_min)"
  _below="$( \
    echo \
      "${_value} < ${_dpi_min}" | \
      bc \
        -l)"
  if (( "${_below}" )); then
    _msg_error \
      "value '${_value}' below minimum '${_dpi_min}' dpi" \
      1
  else
    _cmd=(
      wm
        density
          "${_value}"
    )
    sudo \
      "${_cmd[@]}"
  fi
}

_display_dpi() {
  local \
    _command="${1}" \
    _value="${2}" \
    _mode="${3}" \
    _physical_density="${4}" \
    _density_mode="Override" \
    _args=()
  if [[ "${_physical_density}" == "y" ]]; then
    _density_mode="Physical"
  fi
  if [[ "${_command}" == "set" ]]; then
    _args+=(
      "${_value}"
    )
  elif [[ "${_command}" == "get" ]]; then
    _args+=(
      "${_density_mode}"
    )
  elif [[ "${_command}" == "min" ]]; then
    _args+=(
    )
  fi
  "_${_mode}_${_command}" \
    "${_args[@]}"
}

_auto_detect_mode() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _root_requirements
    echo \
      "root"
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    _msg_error \
      "not implemented. something with xdotool needs to be written"
  fi
}

_set_overrides() {
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "target" \
    "command" \
    "get"
  _set_override \
    "dpi" \
    "value" \
    ""
  _set_override \
    "get" \
    "mode" \
    "$(_auto_detect_mode)"
  _set_override \
    "physical" \
    "density" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "  Display density at date:   $(_get "get" "date")"
  _msg_info "           Target command:   $(_get "target" "command")"
  _msg_info "                 Get mode:   $(_get "get" "mode")"
  _msg_info "             Target value:   $(_get "dpi" "value")"
  _msg_info "         Physical density:   $(_get "physical" "density")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Get Android display status

Usage:
  $(_get "app" "name")
    [options]
    <command>
    (<value>)
  commands:
    get                   Get pixel density per inch value
    set                   Set pixel density per inch value
    min                   Get minimum allowed pixel density per inch
  options:
     -m <method>          Method to obtain display status.
                          Default: $(_get "get" "mode")
     -p                   Whether to get physical density
                          Default: $(_get "physical" "density")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:pcvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_get_mode="${OPTARG}" ;;
    p) override_physical_density="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( 0 < "$#" )) && \
  _set \
    "target" \
    "command" \
    "${1}"
(( 1 < "$#" )) && \
[[ "${target_command}" == "set" ]] && \
  _set \
    "dpi" \
    "value" \
    "${2}"
_set_overrides
app_opts=(
  "$(_get \
       "target" \
       "command")"
  "$(_get \
       "dpi" \
       "value")"
  "$(_get \
       "get" \
       "mode")"
  "$(_get \
       "physical" \
       "density")"
)
_show_config
_display_dpi \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
