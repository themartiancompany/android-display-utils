#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_root_requirements() {
  _check_cmd \
    "display-resolution" \
    "android-display-utils"
  _check_cmd \
    "display-aspect-ratio" \
    "android-display-utils"
}

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  get_mode=""
  target_command=""
  scale_value=""
  color=""
  quiet=""
}

_root_get() {
  local \
    _physical_aspect_ratio \
    _current_aspect_ratio \
    _current_height \
    _physical_height \
    _scale
  _physical_aspect_ratio="$( \
    echo \
      "scale=3;$( \
        display-aspect-ratio \
          -p)/1" | \
    bc)"
  _current_aspect_ratio="$( \
    echo \
      "scale=3;$( \
        display-aspect-ratio)/1" | \
    bc)"
  if [[ "${_current_aspect_ratio}" == "${_physical_aspect_ratio}" ]]; then
    _physical_height="$( \
      display-resolution \
        -p \
        -H)"
    _current_height="$( \
      display-resolution \
        -H)"
    _scale="(${_current_height} / ${_physical_height})"
    echo \
      "scale=3;${_scale}" | \
      bc
  elif [[ "${_current_aspect_ratio}" != "${_physical_aspect_ratio}" ]]; then
    _msg_error \
      "display is not using a resolution fit for its native aspect ratio" \
      1
    echo \
      nope
  fi
}

_root_set() {
  local \
    _value="${1}" \
    _current_scale \
    _current_height \
    _current_width \
    _height \
    _physical_height \
    _physical_width \
    _width \
    _cmd=()
  _current_scale="$( \
    "_${_mode}_get")"
  if [[ "${_current_scale}" == "${_value}" ]]; then
    _msg_info \
      "scale set to ${_value} already"
    return \
      0
  fi
  _msg_info \
    "Setting scale from ${_current_scale} to ${_value}"
  _physical_height="$( \
    display-resolution \
      -p \
      -H)"
  _physical_width="$( \
    display-resolution \
      -p \
      -W)"
  _width="$( \
    echo \
      "scale=0;(${_physical_width}*${_value}+0.5)/1" | \
      bc)"
  _height="$( \
    echo \
      "scale=0;(${_physical_height}*${_value}+0.5)/1" | \
      bc)"
  _cmd=(
    wm
      size
        "${_width}x${_height}"
  )
  _msg_info \
    "executing '${_cmd[*]}'"
  sudo \
    "${_cmd[@]}"
}

_display_scale() {
  local \
    _command="${1}" \
    _mode="${2}" \
    _value="${3}" \
    _args=()
  if [[ "${_command}" == "set" ]]; then
    _args+=(
      "${_value}"
    )
  fi
  "_${_mode}_${_command}" \
    "${_args[@]}"
}

_auto_detect_mode() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _root_requirements
    echo \
      "root"
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    _msg_error \
      "not implemented. something with xdotool needs to be written"
  fi
}

_set_overrides() {
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "get" \
    "mode" \
    "$(_auto_detect_mode)"
  _set_override \
    "target" \
    "command" \
    "get"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "   Pixel per area at date:   $(_get "get" "date")"
  _msg_info "                 Get mode:   $(_get "get" "mode")"
  _msg_info "           Target command:   $(_get "target" "command")"
  _msg_info "              Scale value:   $(_get "scale" "value")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Manage Android display scale.

Usage:
  $(_get "app" "name")
    [options]
    (<command>)
    (<value>)
  commands:
    get
    set
  options:
     -m <method>          Method to obtain pixels per total area.
                          Default: $(_get "get" "mode")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:pcvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_get_mode="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( "$#" == 0 )) && \
  _set \
    "target" \
    "command" \
    "get"
(( 0 < "$#" )) && \
  _set \
    "target" \
    "command" \
    "${1}"
(( 1 < "$#" )) && \
  _set \
    "scale" \
    "value" \
    "${2}"
_set_overrides
app_opts=(
  "$(_get \
       "target" \
       "command")"
  "$(_get \
       "get" \
       "mode")"
  "$(_get \
       "scale" \
       "value")"
)
_show_config
_display_scale \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
